@page "/"
@inject BasketClient BasketClient
@inject CatalogClient CatalogClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<AuthorizeView>
    <Authorized>
        <h2>
            Hello @context.User.Identity.Name,
            here's the list of your claims:
        </h2>
        <ul>
            @foreach (var claim in context.User.Claims)
            {
                <li><b>@claim.Type</b>: @claim.Value</li>
            }
        </ul>
    </Authorized>
    <NotAuthorized>
        <p>I'm sorry, I can't display anything until you log in</p>
    </NotAuthorized>
</AuthorizeView>

<div class="main">
    <ul class="pizza-cards">
        @if (items != null)
        {
            @foreach (var item in items)
            {
                <li @onclick="@(() => AddToBasket(item))" style="background-image: url('@item.PictureUri')">
                    <div class="pizza-info">
                        <span class="title">@item.Name</span>
                        @item.Description
                        <span class="price">@item.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

@*<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemovePizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>*@

@*<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigurePizzaDialog
        Pizza="OrderState.ConfiguringPizza"
        OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
</TemplatedDialog>*@

@code {
    IEnumerable<CatalogItem> items;

    protected override async Task OnInitializedAsync()
    {
        await BasketClient.GetItems();
        items = (await CatalogClient.GetPage()).Data;
    }

    async Task AddToBasket(CatalogItem item)
    {
        await JS.Confirm("Ok, added to basket (not really)");
    }
}
